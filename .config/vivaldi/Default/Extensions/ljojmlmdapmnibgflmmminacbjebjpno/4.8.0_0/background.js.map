{"mappings":"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","sources":["./node_modules/content-scripts-register-polyfill/index.js","./node_modules/webext-patterns/index.js","./src/background.js"],"sourcesContent":["\"use strict\";\n/// <reference path=\"./globals.d.ts\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst webext_patterns_1 = require(\"webext-patterns\");\n// @ts-expect-error\nasync function p(fn, ...args) {\n    return new Promise((resolve, reject) => {\n        // @ts-expect-error\n        fn(...args, result => {\n            if (chrome.runtime.lastError) {\n                reject(chrome.runtime.lastError);\n            }\n            else {\n                resolve(result);\n            }\n        });\n    });\n}\nasync function isOriginPermitted(url) {\n    return p(chrome.permissions.contains, {\n        origins: [new URL(url).origin + '/*']\n    });\n}\nasync function wasPreviouslyLoaded(tabId, loadCheck) {\n    const result = await p(chrome.tabs.executeScript, tabId, {\n        code: loadCheck,\n        runAt: 'document_start'\n    });\n    return result === null || result === void 0 ? void 0 : result[0];\n}\nif (typeof chrome === 'object' && !chrome.contentScripts) {\n    chrome.contentScripts = {\n        // The callback is only used by webextension-polyfill\n        async register(contentScriptOptions, callback) {\n            const { js = [], css = [], allFrames, matchAboutBlank, matches, runAt } = contentScriptOptions;\n            // Injectable code; it sets a `true` property on `document` with the hash of the files as key.\n            const loadCheck = `document[${JSON.stringify(JSON.stringify({ js, css }))}]`;\n            const matchesRegex = webext_patterns_1.patternToRegex(...matches);\n            const listener = async (tabId, { status }) => {\n                if (status !== 'loading') {\n                    return;\n                }\n                const { url } = await p(chrome.tabs.get, tabId);\n                if (!url || // No URL = no permission;\n                    !matchesRegex.test(url) || // Manual `matches` glob matching\n                    !await isOriginPermitted(url) || // Permissions check\n                    await wasPreviouslyLoaded(tabId, loadCheck) // Double-injection avoidance\n                ) {\n                    return;\n                }\n                for (const file of css) {\n                    chrome.tabs.insertCSS(tabId, {\n                        ...file,\n                        matchAboutBlank,\n                        allFrames,\n                        runAt: runAt !== null && runAt !== void 0 ? runAt : 'document_start' // CSS should prefer `document_start` when unspecified\n                    });\n                }\n                for (const file of js) {\n                    chrome.tabs.executeScript(tabId, {\n                        ...file,\n                        matchAboutBlank,\n                        allFrames,\n                        runAt\n                    });\n                }\n                // Mark as loaded\n                chrome.tabs.executeScript(tabId, {\n                    code: `${loadCheck} = true`,\n                    runAt: 'document_start',\n                    allFrames\n                });\n            };\n            chrome.tabs.onUpdated.addListener(listener);\n            const registeredContentScript = {\n                async unregister() {\n                    return p(chrome.tabs.onUpdated.removeListener.bind(chrome.tabs.onUpdated), listener);\n                }\n            };\n            if (typeof callback === 'function') {\n                callback(registeredContentScript);\n            }\n            return Promise.resolve(registeredContentScript);\n        }\n    };\n}\n","// Copied from https://github.com/mozilla/gecko-dev/blob/073cc24f53d0cf31403121d768812146e597cc9d/toolkit/components/extensions/schemas/manifest.json#L487-L491\nexport const patternValidationRegex = /^(https?|wss?|file|ftp|\\*):\\/\\/(\\*|\\*\\.[^*/]+|[^*/]+)\\/.*$|^file:\\/\\/\\/.*$|^resource:\\/\\/(\\*|\\*\\.[^*/]+|[^*/]+)\\/.*$|^about:/;\nfunction getRawRegex(matchPattern) {\n    if (!patternValidationRegex.test(matchPattern)) {\n        throw new Error(matchPattern + ' is an invalid pattern, it must match ' + String(patternValidationRegex));\n    }\n    let [, protocol, host, pathname] = matchPattern.split(/(^[^:]+:[/][/])([^/]+)?/);\n    protocol = protocol\n        .replace('*', 'https?') // Protocol wildcard\n        .replace(/[/]/g, '[/]'); // Escape slashes\n    host = (host !== null && host !== void 0 ? host : '') // Undefined for file:///\n        .replace(/[.]/g, '[.]') // Escape dots\n        .replace(/^[*]/, '[^/]+') // Initial or only wildcard\n        .replace(/[*]$/g, '[^.]+'); // Last wildcard\n    pathname = pathname\n        .replace(/[/]/g, '[/]') // Escape slashes\n        .replace(/[.]/g, '[.]') // Escape dots\n        .replace(/[*]/g, '.*'); // Any wildcard\n    return '^' + protocol + host + '(' + pathname + ')?$';\n}\nexport function patternToRegex(...matchPatterns) {\n    return new RegExp(matchPatterns.map(getRawRegex).join('|'));\n}\n","// import \"crx-hotreload\";\nimport \"content-scripts-register-polyfill\";\n\nconst baseURL = \"https://www.meetenhancementsuite.com/\";\nconst signupURL = `${baseURL}/signup`;\nconst changelogURL = `${baseURL}/changelog`;\nconst uninstallURL = `${baseURL}/goodbye`;\nconst featuresWithLicenseKey = [\n  \"licenseKey\",\n  \"autoAdmit\",\n  \"hideNames\",\n  \"showNames\",\n  \"hideTalkIcons\",\n  \"autoReject\",\n  \"autoCaptions\",\n  \"autoChat\",\n  \"autoFullScreen\",\n  \"autoJoin\",\n  \"autoJoinParticipants\",\n  \"hideCommentBubble\",\n  \"hideComments\",\n  \"keyCode\",\n  \"borderColor\",\n  \"muteMicrophone\",\n  \"mutePopup\",\n  \"muteVideo\",\n  \"quickLeave\",\n  \"smartUnmute\",\n  \"transBar\",\n  \"displayClock\",\n  \"darkMode\",\n  \"pictureInPicture\",\n  \"noAddOthers\",\n  \"mirrorVideos\",\n  \"meetingTimer\",\n  \"pinBottomBar\",\n  \"toggleBottomBar\",\n  \"hideJoinUpsell\",\n  \"hideJoinUpsellDate\",\n  \"hideToolsUpsell\",\n  \"hideMainPageUpsell\",\n  \"hideHangupPageUpsell\",\n  \"leavePrompt\",\n  \"setBackgroundColor\",\n  \"backgroundColor\",\n  \"speakerBorder\",\n  \"autoUnmute\",\n  \"autoCopyURL\",\n  \"hideTopBar\",\n  \"desktopDeeplink\",\n  \"addChimes\",\n  \"muteSounds\",\n  \"autoRecord\",\n  \"homeOnLeave\",\n  \"adjustVolume\",\n  \"minimizeVideo\",\n];\n\nconst featureObject = featuresWithLicenseKey.reduce(\n  (prev, current) => ({\n    ...prev,\n    [current]: false,\n  }),\n  {}\n);\n\nfeatureObject.keyCode = {\n  keyCode: 32,\n  ctrlKey: false,\n  altKey: false,\n  shiftKey: false,\n  metaKey: false,\n};\n\nfeatureObject.backgroundColor = \"#111111\";\nfeatureObject.adjustVolume = \"10\"\nfeatureObject.borderColor = \"#64ffda\";\n\nchrome.runtime.onInstalled.addListener((details) => {\n  if (details.reason === \"install\") {\n    chrome.tabs.create({\n      url: signupURL,\n    });\n    chrome.storage.sync.set(featureObject);\n  }\n  if (details.reason === \"update\") {\n    chrome.tabs.create({\n      url: changelogURL,\n    });\n    chrome.browserAction.setBadgeBackgroundColor({ color: [240, 104, 104, 1] });\n    chrome.browserAction.setBadgeText({ text: \"new\" });\n  }\n});\n\nchrome.runtime.setUninstallURL(uninstallURL);\n\nchrome.runtime.onMessage.addListener((message) => {\n  if (message.popupOpen) {\n    chrome.browserAction.setBadgeText({ text: \"\" });\n  }\n\n  if (message.deeplink) {\n    chrome.permissions.request(\n      {\n        origins: [\"*://calendar.google.com/*\"],\n      },\n      function (granted) {\n        if (granted) {\n          requestPermissions();\n          chrome.tabs.query(\n            { active: true, currentWindow: true },\n            function (tabs) {\n              chrome.tabs.update(tabs[0].id, { url: tabs[0].url });\n            }\n          );\n        }\n      }\n    );\n  }\n\n  if (message.muteSounds) {\n    chrome.permissions.request(\n      {\n        permissions: [\"webRequest\", \"webRequestBlocking\"],\n        origins: [\"*://www.gstatic.com/meet/sounds/*\", \"*://meet.google.com/*\"],\n      },\n      function (granted) {\n        if (granted) {\n          muteSounds(true);\n        }\n      }\n    );\n  } else if (message.muteSounds == false) {\n    // Detect if feature has been turned off\n    muteSounds(false);\n  }\n});\n\nfunction requestPermissions() {\n  chrome.contentScripts.register({\n    js: [\n      {\n        file: \"./extension.js\",\n      },\n    ],\n    matches: [\"*://calendar.google.com/*\"],\n  });\n}\n\nchrome.storage.sync.get(\"licenseKey\", (response) => {\n  if (response.licenseKey != undefined) {\n    chrome.runtime.onMessage.addListener(() => {\n      let found = false;\n      let tabId = undefined;\n      let currentTabId = undefined;\n      let winId;\n\n      chrome.tabs.query(\n        { active: true, windowType: \"normal\", currentWindow: true },\n        (tab) => {\n          currentTabId = tab[0].id;\n        }\n      );\n\n      chrome.tabs.query({}, (tabs) => {\n        for (var i = 0; i < tabs.length; i++) {\n          if (tabs[i].audible) {\n            found = true;\n            tabId = tabs[i].id;\n            winId = tabs[i].windowId;\n          }\n        }\n\n        if (found == true && tabId != currentTabId) {\n          chrome.tabs.update(tabId, { active: true });\n          setTimeout(() => {\n            chrome.windows.update(winId, { focused: true });\n          }, 200);\n        }\n      });\n    });\n  }\n});\n\nfunction muteSounds(on) {\n  if (on) {\n    // match pattern for the URLs to redirect\n    const pattern = \"*://www.gstatic.com/meet/sounds/*\";\n\n    // add the listener,\n    // passing the filter argument and \"blocking\"\n    chrome.webRequest.onBeforeRequest.addListener(cancel, { urls: [pattern] }, [\n      \"blocking\",\n    ]);\n  } else {\n    chrome.webRequest.onBeforeRequest.removeListener(cancel);\n  }\n}\n\n// cancel function returns an object\n// which contains a property `cancel` set to `true`\nfunction cancel(requestDetails) {\n  // console.log(\"Canceling: \" + requestDetails.url);\n  return { cancel: true };\n}\n"],"names":["Object","defineProperty","value","patternValidationRegex","getRawRegex","matchPattern","test","Error","String","protocol","host","pathname","split","replace","async","p","fn","args","Promise","resolve","reject","result","chrome","runtime","lastError","contentScripts","[object Object]","contentScriptOptions","callback","js","css","allFrames","matchAboutBlank","matches","runAt","loadCheck","JSON","stringify","matchesRegex","matchPatterns","RegExp","map","join","$cd98f969e20b938aa4613c8274544149$export$patternToRegex","listener","tabId","status","url","tabs","get","permissions","contains","origins","URL","origin","isOriginPermitted","executeScript","code","wasPreviouslyLoaded","file","insertCSS","onUpdated","addListener","registeredContentScript","unregister","removeListener","bind","featureObject","reduce","prev","current","muteSounds","on","pattern","webRequest","onBeforeRequest","cancel","urls","requestDetails","keyCode","ctrlKey","altKey","shiftKey","metaKey","backgroundColor","adjustVolume","borderColor","onInstalled","details","reason","create","storage","sync","set","browserAction","setBadgeBackgroundColor","color","setBadgeText","text","setUninstallURL","onMessage","message","popupOpen","deeplink","request","granted","register","query","active","currentWindow","update","id","response","undefined","licenseKey","currentTabId","winId","found","windowType","tab","i","length","audible","windowId","setTimeout","windows","focused"],"version":3,"file":"background.js.map"}